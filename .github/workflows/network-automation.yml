name: Network Automation CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 8 * * *'  # Daily at 8 AM
  workflow_dispatch:  # Manual trigger

jobs:
  network-automation-tests:
    runs-on: ubuntu-latest
    
    services:
      netbox:
        image: netboxcommunity/netbox:latest
        env:
          SUPERUSER_API_TOKEN: c316eac1941ee8fdd5059e4f9e777648459ab551
          SKIP_SUPERUSER: true
        ports:
          - 8000:8080
        options: --health-cmd "curl -f http://localhost:8080/api/" --health-interval 30s --health-timeout 10s --health-retries 5

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🐳 Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: 🚀 Create Test Containers
      run: |
        # Create FRRouting test containers
        docker run -d --name R1 --hostname Router-1 alpine:latest sleep 3600
        docker run -d --name R2 --hostname Router-2 alpine:latest sleep 3600  
        docker run -d --name R3 --hostname Router-3 alpine:latest sleep 3600
        
        # Configure containers
        for container in R1 R2 R3; do
          docker exec $container sh -c "apk add --no-cache iproute2 curl"
        done
        
        # Wait for containers to be ready
        sleep 10
        
        # Verify containers
        docker ps | grep -E "(R1|R2|R3)"

    - name: ⚡ Wait for NetBox
      run: |
        echo "Waiting for NetBox to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/api/status/ > /dev/null 2>&1; then
            echo "✅ NetBox is ready!"
            break
          fi
          echo "⏳ Waiting for NetBox... ($i/30)"
          sleep 10
        done

    - name: 🔧 Setup NetBox Test Data
      run: |
        python3 scripts/setup_test_data.py

    - name: 📋 Ansible Inventory Test
      run: |
        cd ansible
        ansible-inventory -i netbox_inventory.yml --list > ../test_results/inventory_output.json

    - name: ⚙️ Configuration Generation Test
      run: |
        cd ansible
        ansible-playbook -i netbox_inventory.yml playbooks/push_configs.yml --check

    - name: 🔍 Device State Validation
      run: |
        cd netbox
        python3 validate_device_state.py

    - name: 🏥 Health Monitoring Test
      run: |
        cd netbox
        python3 monitor_devices.py

    - name: 🌐 Topology Discovery Test
      run: |
        cd netbox
        python3 topology_discovery.py

    - name: 📊 Generate Test Summary
      run: |
        echo "# Network Automation Test Results" > test_results/summary.md
        echo "Generated on: $(date)" >> test_results/summary.md
        echo "" >> test_results/summary.md
        echo "## Test Status" >> test_results/summary.md
        echo "- ✅ Inventory Generation: Passed" >> test_results/summary.md
        echo "- ✅ Configuration Templates: Passed" >> test_results/summary.md
        echo "- ✅ Device Validation: Passed" >> test_results/summary.md
        echo "- ✅ Health Monitoring: Passed" >> test_results/summary.md
        echo "- ✅ Topology Discovery: Passed" >> test_results/summary.md

    # UPDATED: Use v4 instead of v3
    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: network-automation-test-results-${{ github.run_number }}
        path: |
          test_results/
          netbox/*.json
          netbox/*.html
        retention-days: 30

    # UPDATED: Use v4 instead of v3  
    - name: 📤 Upload Logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: failure-logs-${{ github.run_number }}
        path: |
          **/*.log
          /tmp/netbox.log
        retention-days: 7

    - name: 🧪 Test Summary Comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test_results/summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  security-scan:
    runs-on: ubuntu-latest
    needs: network-automation-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔒 Security Scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ANSIBLE: true
        VALIDATE_PYTHON: true
        VALIDATE_YAML: true
        VALIDATE_JSON: true
